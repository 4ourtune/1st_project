Appendix A Summary of guidelines

Rule 1.1
A project shall not contain unreachable code.

Rule 1.2
Language extensions should not be used.

Rule 1.3
There shall be no occurrence of undefined or critical unspecified behaviour.

Rule 2.1
A project shall not contain unreachable code.

Rule 2.2
There shall be no dead code.

Rule 2.3
A project shall not contain unused type declarations.

Rule 2.4
Sections of code shall not be "commented out".

Rule 3.1
All usage of implementation-defined behaviour shall be documented.

Rule 3.2
The character sequences /* and // shall not be used within a comment.

Rule 4.1
Run-time failures shall be minimized.

Rule 5.1
External identifiers shall be distinct.

Rule 5.2
Identifiers declared in the same scope and name space shall be distinct.

Rule 5.3
An identifier declared in an inner scope shall not hide an identifier declared in an outer scope.

Rule 5.4
Macro identifiers shall be distinct.

Rule 5.5
Identifiers shall be distinct from macro names.

Rule 5.6
A typedef name shall be a unique identifier.

Rule 5.7
A tag name shall be a unique identifier.

Rule 5.8
Identifiers that define objects or functions with external linkage shall be unique.

Rule 5.9
Identifiers that define objects or functions with internal linkage shall be unique.

Rule 6.1
Bit-fields shall only be declared with an appropriate type.

Rule 6.2
Single-bit named bit fields shall not be of a signed type.

Rule 7.1
Octal constants shall not be used.

Rule 7.2
A "u" or "U" suffix shall be applied to all constants of unsigned type.

Rule 7.3
The lowercase character "l" shall not be used in a literal suffix.

Rule 7.4
A string literal shall not be assigned to an object unless the object’s type is "pointer to const".

Rule 7.5
A string literal shall not be modified.

Rule 8.1
Types shall be explicitly specified.

Rule 8.2
Function types shall be in prototype form with named parameters.

Rule 8.3
All declarations of an object or function shall be compatible.

Rule 8.4
An object or function with external linkage shall be declared in a header file.

Rule 8.5
There shall be no definitions or objects or functions in a header file.

Rule 8.6
An identifier with external linkage shall have exactly one definition.

Rule 8.7
Functions and objects shall not be defined with external linkage if they are referenced in only one translation unit.

Rule 8.8
The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage.

Rule 8.9
An object should be defined at block scope if it is only accessed within a single function.

Rule 8.10
All declarations and definitions of objects or functions shall be at file scope.

Rule 8.11
When an array is declared with external linkage, its size shall be explicitly specified.

Rule 8.12
Within an enumerator list the value of an implicitly-specified enumeration constant shall be unique.

Rule 8.13
A pointer should point to a const-qualified type whenever possible.

Rule 9.1
The value of an object shall be initialized before it is used.

Rule 9.2
The initializer for an aggregate or union shall be enclosed in braces.

Rule 9.3
Arrays shall not be partially initialized.

Rule 9.4
An element of an object shall not be initialized more than once.

Rule 9.5
Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly.

Rule 10.1
Operands shall not be of an inappropriate essential type.

Rule 10.2
Expressions of essentially character type shall not be used inappropriately.

Rule 10.3
The value of an expression shall not be assigned to an object with a narrower essential type.

Rule 10.4
The value of an expression shall not be assigned to an object with a different essential type category.

Rule 10.5
The value of an expression shall not be cast to an inappropriate essential type.

Rule 10.6
The value of a composite expression shall not be assigned to an object with wider essential type.

Rule 10.7
If a composite expression is used, the result shall not be assigned to an object with a different essential type category.

Rule 10.8
The value of an expression shall not be cast to a different essential type category or a narrower essential type.

Rule 11.1
Conversions shall not be performed between a pointer to a function and any type other than an integral type.

Rule 11.2
Conversions shall not be performed between a pointer to an incomplete type and any other type.

Rule 11.3
A cast shall not be performed between a pointer type and an integral type.

Rule 11.4
A cast should not be performed between a pointer to object type and a different pointer to object type.

Rule 11.5
A cast shall not be performed that removes any const or volatile qualification from the type addressed by a pointer.

Rule 11.6
A cast shall not be performed between pointer to void and an arithmetic type.

Rule 11.7
A cast shall not be performed between pointer to function and pointer to object.

Rule 11.8
A cast shall not remove any const or volatile qualification from the type addressed by a pointer.

Rule 12.1
The precedence of operators within expressions should be made explicit.

Rule 12.2
The value of an expression shall be the same under any order of evaluation that the standard permits.

Rule 12.3
The sizeof operator shall not have an operand which is a function parameter declared as "array of type".

Rule 13.1
Initialization of a union should only use the first member.

Rule 13.2
The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.

Rule 13.3
A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects.

Rule 13.4
The result of an assignment operator should not be used.

Rule 13.5
The right hand operand of a logical && or || operator shall not contain side effects.

Rule 13.6
The operand of the sizeof operator shall not contain any side effects.

Rule 13.7
Boolean operations whose results are invariant shall not be permitted.

Rule 13.8
Each operand of a logical && or || shall yield a value which is Boolean.

Rule 13.9
The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression.

Rule 13.10
The comma operator shall not be used.

Rule 13.11
Evaluation of constant unsigned integer expressions shall not lead to wrap-around.

Rule 13.12
The underlying bit representations of floating-point values shall not be used.

Rule 13.13
Multiple use of volatile objects shall be avoided.

Rule 13.14
The controlling expression of an if-statement and loop construct shall have essentially Boolean type.

Rule 14.1
There shall be no unreachable code.

Rule 14.2
All non-null statements shall either have at least one side effect however executed, or cause control flow to change.

Rule 14.3
Controlling expressions shall not be invariant.

Rule 14.4
The controlling expression of an if-statement and loop construct shall have essentially Boolean type.

Rule 15.1
The goto statement shall not be used.

Rule 15.2
The goto statement shall jump to a label declared later in the same function.

Rule 15.3
Any label referenced by a goto statement shall be declared in the same block.

Rule 15.4
The goto statement shall not jump into a block from outside.

Rule 15.5
A function should have a single point of exit at the end.

Rule 16.1
Functions shall not call themselves, either directly or indirectly.

Rule 16.2
Functions shall not call themselves, either directly or indirectly.

Rule 16.3
Identifiers used in the declaration of functions shall be declared with appropriate linkage.

Rule 16.4
Array indexing shall be the only allowed form of pointer arithmetic.

Rule 16.5
Functions shall have a single exit point.

Rule 16.6
The number of parameters passed to a function shall match the function’s prototype.

Rule 16.7
A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object.

Rule 17.1
Functions shall not be defined with a variable number of arguments.

Rule 17.2
Functions shall not call themselves, either directly or indirectly.

Rule 17.3
A function shall not be declared implicitly.

Rule 17.4
All exit paths from a function with non-void return type shall have an explicit return statement with an expression.

Rule 17.5
The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements.

Rule 17.6
The declaration of a function prototype shall specify the number of parameters.

Rule 17.7
The value returned by a function having non-void return type shall be used.

Rule 17.8
A function parameter shall not be modified.

Rule 18.1
A pointer resulting from arithmetic on a pointer operand shall address an element of the same array.

Rule 18.2
Subscript operator [] shall only be applied to an array name, pointer or a class with overloaded subscript operator.

Rule 18.3
An area of memory shall only be freed if it was dynamically allocated.

Rule 18.4
Unused pointers should be set to NULL.

Rule 19.1
An object shall not be assigned or copied in a way that breaks aliasing rules.

Rule 19.2
Union members shall not be accessed using a member of a different type.

Rule 19.3
A pointer shall not be dereferenced unless it points to a valid object.

Rule 19.4
C macros shall only expand to a braced initializer, a constant, a parenthesized expression, a type qualifier, a storage class specifier, or a call to a function-like macro.

Rule 19.5
Macros shall not be #defined or #undef’d within a block.

Rule 19.6
Macros with a replacement list shall be enclosed in parentheses.

Rule 19.7
A function-like macro shall not be invoked without all of its arguments.

Rule 20.1
#include directives shall only be preceded by preprocessor directives.

Rule 20.2
The names of standard header files shall not be reused for other header files.

Rule 20.3
The #include directive shall be followed by either a header name or library file name.

Rule 20.4
A macro shall not be defined with the same name as a keyword.

Rule 20.5
#undef shall not be used.

Rule 20.6
Include guards shall be used in all header files.

Rule 20.7
Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses.

Rule 20.8
The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1.

Rule 20.9
All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define’d before use.

Rule 20.10
All macro identifiers in a #if or #elif preprocessing directive shall be replaced before evaluation.

Rule 20.11
A macro name shall be #define’d only once in a single translation unit.

Rule 20.12
The # and ## operators should not be used.

Rule 20.13
A line whose first token is # shall be a valid preprocessing directive.

Rule 21.1
#pragma directives shall not be used.

Rule 21.2
A reserved identifier or macro name shall not be declared.

Rule 21.3
The memory allocation and deallocation functions of <stdlib.h> shall not be used.

Rule 21.4
The standard header file <setjmp.h> shall not be used.

Rule 21.5
The standard header file <signal.h> shall not be used.

Rule 21.6
The standard header file <stdarg.h> shall not be used.

Rule 21.7
The value of errno shall not be used.

Rule 21.8
The library functions atof, atoi, atol and atoll from <stdlib.h> shall not be used.

Rule 21.9
The library functions abort, exit, getenv and system from <stdlib.h> shall not be used.

Rule 21.10
The input/output library stdio.h shall not be used in production code.

Rule 21.11
The standard header file <wchar.h> shall not be used.

Rule 21.12
The standard header file <wctype.h> shall not be used.

Rule 22.1
All resources acquired by a function shall be released before it returns.

Rule 22.2
A block of memory shall only be freed if it was allocated by means of a standard library function.

Rule 22.3
The same memory block shall not be freed more than once.

Rule 22.4
There shall be no attempt to free memory that has already been automatically reclaimed.
